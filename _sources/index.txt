.. barrista documentation master file, created by
   sphinx-quickstart on Tue Jun 23 17:47:50 2015.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.


.. figure:: _static/barrista.jpg
   :scale: 35%
   :alt: Gwilym Davies composing his signature drink at the 2009 World Barista Championship in Atlanta, Georgia.
   :align: right

   `Photo by Liz Clayton <https://commons.wikimedia.org/wiki/File:Gwilym_Davies.jpg>`_,
   `CC <http://creativecommons.org/licenses/by/3.0/>`_.


Welcome to barrista's documentation!
====================================

Barrista will serve your `caffe <https://github.com/BVLC/caffe>`_
right! It is a Python library that offers a comparable interface to
`keras <http://keras.io>`_
and `Theano <http://deeplearning.net/software/theano/>`_, but using
standard `caffe`.

Why barrista?
=============

`barrista` gives you full, pythonic control over the entire `caffe` framework.
It is different from the plain `caffe` Python interface in the way, that it
exposes the entire caffe functionality (from net design over training and
prediction) in a principled way to Python.

* Design your nets with the full power of `caffe` within Python. Creating
  a network is as easy as::

    import barrista.design as ds
    netspec = ds.NetSpecification([[10, 3, 51, 51], [10]],
                                  inputs=['data', 'annotations'])
    netspec.layers.append(ds.ConvolutionLayer(Convolution_kernel_size=3,
                                              Convolution_pad=1,
                                              Convolution_num_output=1))
    netspec.layers.append(ds.EuclideanLossLayer(include_stages=['fit']))
    net = netspec.instantiate()

* Use your networks in a principled way from Python. No more intransparent
  preprocessing, but helpful support::

    import barrista.solver
    net.fit(1000,
            barrista.solver.SGDSolver(base_lr=0.01),
            X={'data': np.ones((21, 3, 51, 51)),  # Autoatically batched.
               'annotations': np.zeros((21, 1, 51, 51))})
    net.predict({'data': np.zeros((5, 3, 51, 51))})

* Use callbacks to easily customize training and prediction::

    import barrista.monitoring
    net.fit(# ... as before
            train_callbacks=[
              barrista.monitoring.Checkpointer('/tmp', 100),
              barrista.monitoring.ProgressIndicator()])

* `barrista` is always fully consistent with `caffe`. We internally inspect the
  protobuf object generated by `caffe` to infer the interface. Adding your
  own layers is as easy as::

    import barrista.config
    barrista.config.LAYER_TYPES['Amazing'] = ['AmazingParameter']

* `barrista` naturally understands and writes every .prototxt
  file your caffe version does! Load `.prototxt` files (also from the
  `model zoo <http://caffe.berkeleyvision.org/model_zoo.html>`_!)
  and use or modify the networks with barrista::

    net.to_prototxt(output_filename='net.prototxt')
    net.save('net.caffmodel')  # Save the weights.
    new_network = ds.NetSpecification.from_prototxt(filename='net.prototxt')
    new_network.load_blobs_from('net.caffemodel')  # Load the weights.

* It runs on every platform `caffe` runs on, and can be used with Python 2 and 3.

What's the license?
===================

You can use barrista under the MIT License, which means you may use it freely
in any projects.

Where do I get it?
==================

The source is hosted on `github <https://github.com/classner/barrista>`_ and the
documentation/homepage is available on github pages at
`http://classner.github.io/barrista <http://classner.github.io/barrista>`_.

Documentation
=============

.. toctree::
   :maxdepth: 4

   setup
   usage
   barrista
   about


Indices and tables
==================

* :ref:`genindex`
* :ref:`modindex`
